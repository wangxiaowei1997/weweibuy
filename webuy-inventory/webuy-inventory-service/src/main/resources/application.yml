server:
  port: 8601

spring:
   profiles:
     active: ${profileActive}
   application:
     name: webuy-inventory
   datasource:
      type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型
      driver-class-name: org.gjt.mm.mysql.Driver              # mysql驱动包
      url: jdbc:mysql://106.12.15.87:3306/webuy_inventory?useUnicode=true&characterEncoding=UTF-8             # 数据库名称
      username: user01
      password: ak402507979
      initialSize: 5
      minIdle: 5
      maxActive: 20
      maxWait: 60000
      poolPreparedStatements: true           # 打开PSCache，并且指定每个连接上PSCache的大小
      maxPoolPreparedStatementPerConnectionSize: 20
      filters: stat,wall,logback    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 # 通过connectProperties属性来打开mergeSql功能；慢SQL记录

   cache:
       type: redis
       redis:
         time-to-live: 200000  #缓存超时时间ms
         cache-null-values: false  #是否缓存空值
   redis:
     database: 6 # Redis数据库索引（默认为0）
     host: 106.12.95.245  #Redis服务器地址
     port: 6379 # Redis服务器连接端口
     password: ak402507979 # Redis服务器连接密码（默认为空）
     jedis:
       max-active: 8 # 连接池最大连接数（使用负值表示没有限制）
       max-idle: 3 # 连接池中的最大空闲连接
       max-wait: 2000 # 连接池最大阻塞等待时间（使用负值表示没有限制）
       min-idle: 2 # 连接池中的最小空闲连接
       timeout: 5000 # 连接超时时间（毫秒）
   rabbitmq:
     host: 106.12.95.245
     port: 5672
     username: user01
     password: ak402507979
     virtual-host: /message
     connection-timeout: 15000
     listener:    #监听数量
       simple:
         concurrency: 1    #最小监听数
         max-concurrency: 5  #最大监听数
         acknowledge-mode: MANUAL  #手动应答
         retry:  #重试机制,当监听发放抛出异常后,会自动进行重新发送(重试几次后RabbitMQ,没有想那个监听发消息了)
           max-attempts: 3   #最大重试次数
           enabled: true  #是否开启消费者重试（为false时关闭消费者重试，这时消费端代码异常会一直重复收到消息）
           initial-interval: 2000  #重试间隔时间（单位毫秒
           default-requeue-rejected: false  #重试次数超过上面的设置之后是否丢弃（false不丢弃时需要写相应代码将该消息加入死信队列）
         prefetch: 1   #一次可以消费的消息,可用于限流
       direct:
         acknowledge-mode: MANUAL
         prefetch: 1  #一次可以消费的消息,可用于限流
     publisher-confirms: true  #comfirmsCallback
     publisher-returns: true   #returnCallback
     template:
       mandatory: true    #使用returnCallback必须为true

   security:
       user:
         name: admin
         password: ak402507979

   mail:
     default-encoding: UTF-8
     host: smtp.126.com
     port: 25
     protocol: smtp
     username: ak40250@126.com
     password: ak402507979

logging:
  config: classpath:config/logback/logback-spring.xml

mybatis:
  config-location: classpath:config/mybatis/mybatis.cfg.xml        # mybatis配置文件所在路径
  type-aliases-package: com.weweibuy.webuy.inventory.common.model.po    # 所有Entity别名类所在包
  mapper-locations: classpath:config/mybatis/mapper/**/*.xml

---
  #dev environment
spring:
  profiles: dev
eureka:
  client:
    register-with-eureka: true
    service-url:
      defaultZone: http://admin:ak402507979@106.12.95.245:7001/eureka
  instance:
    instance-id: ${spring.application.name}:${eureka.instance.ip-address}:${server.port}  #必须唯一
    prefer-ip-address: true     #访问路径可以显示IP地址,此为内网ip,如果server和client不在同一网段使用ip-address:配置
    ip-address: 127.0.0.1
    metadata-map:
       context-path: /actuator
       startup: ${random.int}    #needed to trigger info and endpoint update after restart
       "user.name": ${spring.security.user.name}         #These two are needed so that the server
       "user.password": ${spring.security.user.password}  #can access the protected client endpoints
    health-check-url: http://${eureka.instance.ip-address}:${server.port}/actuator/health
    status-page-url: http://${eureka.instance.ip-address}:${server.port}/actuator/info
    home-page-url: http://${eureka.instance.ip-address}:${server.port}/

hystrix: #hystrix配置
  command:
    default:
      execution:
        timeout:
        enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 15000
      circuitBreaker:
        sleepWindowInMilliseconds: 1000 #断路器恢复时间
        errorThresholdPercentage: 80  #触发短路,失败百分比
  threadpool:
    default:
      coreSize: 10  #线程池大小
      maxQueueSize: 10  #最大等待队列数


---
  #test environment
spring:
  profiles: test

eureka:
  client:
    register-with-eureka: true
    service-url:
      defaultZone: http://admin:ak402507979@106.12.95.245:7001/eureka
  instance:
    instance-id: ${spring.application.name}:${eureka.instance.ip-address}:${server.port}  #必须唯一
    prefer-ip-address: true     #访问路径可以显示IP地址,此为内网ip,如果server和client不在同一网段使用ip-address:配置
    ip-address: 119.3.11.116
    metadata-map:
       context-path: /actuator
       startup: ${random.int}    #needed to trigger info and endpoint update after restart
       "user.name": ${spring.security.user.name}         #These two are needed so that the server
       "user.password": ${spring.security.user.password}  #can access the protected client endpoints
    health-check-url: http://${eureka.instance.ip-address}:${server.port}/actuator/health
    status-page-url: http://${eureka.instance.ip-address}:${server.port}/actuator/info
    home-page-url: http://${eureka.instance.ip-address}:${server.port}/
---

  #test environment
spring:
  profiles: local

eureka:
  client:
    register-with-eureka: true
    service-url:
      defaultZone: http://admin:ak402507979@localhost:7001/eureka
  instance:
    instance-id: ${spring.application.name}:${eureka.instance.ip-address}:${server.port}  #必须唯一
    prefer-ip-address: true     #访问路径可以显示IP地址,此为内网ip,如果server和client不在同一网段使用ip-address:配置
    ip-address: 127.0.0.1
    metadata-map:
       context-path: /actuator
       startup: ${random.int}    #needed to trigger info and endpoint update after restart
       "user.name": ${spring.security.user.name}         #These two are needed so that the server
       "user.password": ${spring.security.user.password}  #can access the protected client endpoints
    health-check-url: http://${eureka.instance.ip-address}:${server.port}/actuator/health
    status-page-url: http://${eureka.instance.ip-address}:${server.port}/actuator/info
    home-page-url: http://${eureka.instance.ip-address}:${server.port}/
---








