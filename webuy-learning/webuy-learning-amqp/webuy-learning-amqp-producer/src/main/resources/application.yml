server:
  port: 8082
spring:
  profiles:
    active: ${profileActive}
  application:
    name: learning-amqp-producer
  zipkin:
     base-url: http://106.12.95.245:9411
     enabled: true
     message-timeout: 10
     discovery-client-enabled: true
  sleuth:
     sampler:
        probability: 0.1
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型
    driver-class-name: org.gjt.mm.mysql.Driver              # mysql驱动包
    url: jdbc:mysql://47.99.129.104:3306/webuy_learning?useUnicode=true&characterEncoding=UTF-8             # 数据库名称
    username: user01
    password: ak402507979
    initialSize: 5
    minIdle: 5
    maxActive: 20
    maxWait: 60000
    poolPreparedStatements: true           # 打开PSCache，并且指定每个连接上PSCache的大小
    maxPoolPreparedStatementPerConnectionSize: 20
    filters: stat,wall,logback    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
  rabbitmq:
    host: 47.99.129.104
    port: 5672
    username: user01
    password: ak402507979
    virtual-host: /message
    connection-timeout: 15000
    listener:    #监听数量
      simple:
        concurrency: 1    #最小监听数
        max-concurrency: 10  #最大监听数
        acknowledge-mode: MANUAL  #手动应答
        retry:  #重试机制,当监听发放抛出异常后,会自动进行重新发送(重试几次后RabbitMQ,没有想那个监听发消息了)
          max-attempts: 3   #最大重试次数
          enabled: true  #是否开启消费者重试（为false时关闭消费者重试，这时消费端代码异常会一直重复收到消息）
          initial-interval: 2000  #重试间隔时间（单位毫秒
        default-requeue-rejected: false  #重试次数超过上面的设置之后是否丢弃（false不丢弃时需要写相应代码将该消息加入死信队列）
        prefetch: 1   #一次可以消费的消息,可用于限流
      direct:
        acknowledge-mode: MANUAL


eureka:
  client:
    register-with-eureka: true
    service-url:
      defaultZone: http://admin:ak402507979@47.99.129.104:7001/eureka
  instance:
    instance-id: ${spring.application.name}:${eureka.instance.ip-address}:${server.port}  #必须唯一
    prefer-ip-address: true     #访问路径可以显示IP地址,此为内网ip,如果server和client不在同一网段使用ip-address:配置
    ip-address: 127.0.0.1
    health-check-url: http://${eureka.instance.ip-address}:${server.port}/actuator/health
    status-page-url: http://${eureka.instance.ip-address}:${server.port}/actuator/info
    home-page-url: http://${eureka.instance.ip-address}:${server.port}/


logging:
  config: classpath:config/logback/logback-spring.xml